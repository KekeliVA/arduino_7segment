GameControlrev2.txt
Who has access
Not shared
System properties
Type
Text
Size
9 KB
Storage used
9 KB
Location
Project 2
Owner
me
Modified
Jul 27, 2018 by me
Opened
3:34 PM by me
Created
May 7, 2018 with Google Drive Web
Add a description
Viewers can download
/*The purpose of this program is to drive a 
 *4 digit 7 segment display to act as a 
 *mechanical slot machine.
 *@author Kekeli Afantchao
*/

bool button;
bool buttonState = 0;
int random1y = 0;
int random2y = 0;
int random3y = 0;
byte mask_val = B00010000; 
byte DIGIT1 = B00001110;
byte DIGIT2 = B00001101;
byte DIGIT3 = B00001011;
byte DIGIT4 = B00000111;
byte N1 = B00001100; //1 GFEDCBAx
byte N2 = B10110110; //2 
byte N3 = B10011110; //3
byte N4 = B11001100; //4
byte N5 = B11011010; //5
byte N6 = B11111000; //6
byte N7 = B00001110; //7
byte N8 = B11111110; //8
byte N9 = B11001110; //9
byte myWin[] = {B00001100, B10110110, B10011110, B11001100, B11011010, B11111000, B00001110, B11111110, B11001110}; 
byte CLEAR = B00000000; //turns LEDs in port off




void setup() {

  //initializing serial communication 
  //Serial.begin(9600);
  //initializing data direction registers
  DDRB = B00001111; //XY 13-8
  DDRD = B11111110; //7-0
  pinMode(12, INPUT_PULLUP); 

}

void loop() {
  //while the button is being pressed the segments flash in a circular pattern

  buttonState = digitalRead(12);
  if(buttonState == 0)
    {
      mask(mask_val);
      //PORTB = PORTB & B00010000; //AND makes it so program doesn't think the button is pressed again
      PORTB = PORTB | DIGIT1; //B00001110;
      PORTD = B01110010;      //Segment F/E/D/A
      //PORTD = CLEAR;          //turns segments off


      /*mask(mask_val);
      PORTB = PORTB | B00001101;
      PORTD = B00000010;
      */ 
      
      mask(mask_val);
      PORTB = PORTB | DIGIT2; //B00001101;  //Digit 2
      PORTD = B00010010;      //Segment D/A
      //PORTD = CLEAR;

      mask(mask_val); 
      PORTB = PORTB | DIGIT3; //B00001011;  //Digit 3
      PORTD = B00010010;      //Segment D/A
      //PORTD = CLEAR;

      mask(mask_val);
      PORTB = PORTB | DIGIT4; //B00000111; //Digit 4
      PORTD = B00011110;      //Segment D/C/B/A 
      //PORTD = CLEAR;            
    }
  randomize(buttonState);     //randomize function called to assign values to random1y,random2y,random3y
  writetoSegs(buttonState);   //function called to write values from random1y, etc to segments
  winner(random1y, random2y, random3y); //evaluates values to determine if they meet the winning condition

}

void mask (byte mask_val)
  {
    PORTB = PORTB & mask_val; //B00010000; 
  }

void randomize (bool buttonState)  //Random values are assigned to variables and are written to LEDs
  {
    if(buttonState == 0)
      {
        random1y = random(1,10);
        random2y = random(1,10);
        random3y = random(1,10);
        Serial.println(random1y);
        Serial.println(random2y);
        Serial.println(random3y); 
      }
  }

void writetoSegs (bool buttonState) //Values are written to corresponding digits and LEDs
  {
    if(buttonState == 1)
      {
        //switch(random1y);
        if(random1y == 1)
          {
            mask(mask_val);
            PORTB = PORTB | DIGIT1;
            PORTD = N1;
            PORTD = CLEAR;
          }
    
         if(random1y == 2)
          {
            mask(mask_val);
            PORTB = PORTB | DIGIT1;
            PORTD = N2;
            PORTD = CLEAR;
          }
         
         if(random1y == 3)
          {
            mask(mask_val);
            PORTB = PORTB | DIGIT1;
            PORTD = N3;
            PORTD = CLEAR;
          }
          
          if(random1y == 4) //case 4:
          {
            mask(mask_val);
            PORTB = PORTB | DIGIT1;
            PORTD = N4;
            PORTD = CLEAR;
          }
    
          if(random1y == 5) //case 5:
          {
            mask(mask_val);
            PORTB = PORTB | DIGIT1;
            PORTD = N5;
            PORTD = CLEAR;
          }
    
          if(random1y ==6) //case 6:
          { 
            mask(mask_val);
            PORTB = PORTB | DIGIT1;
            PORTD = N6;
            PORTD = CLEAR;
          }
    
          if(random1y == 7) //case 7:
          {
            mask(mask_val);
            PORTB = PORTB | DIGIT1;
            PORTD = N7;
            PORTD = CLEAR;
          }
    
          if(random1y == 8) //case 8:
          {
            mask(mask_val);
            PORTB = PORTB | DIGIT1;
            PORTD = N8;
            PORTD = CLEAR;
          }
          
          if(random1y == 9) //case 9:
          {
            mask(mask_val);
            PORTB = PORTB | DIGIT1;
            PORTD = N9;
            PORTD = CLEAR;
          }
      

        //switch (random2y)
          if(random2y == 1)
          {
            //case 1:
            mask(mask_val); 
            PORTB = PORTB | DIGIT2;
            PORTD = N1;
            PORTD = CLEAR;
          }
    
          if(random2y == 2) //case 2:
          {
            mask(mask_val);
            PORTB = PORTB | DIGIT2;
            PORTD = N2;
            PORTD = CLEAR;
          }
    
          if(random2y == 3) //case 3:
          {
            mask(mask_val);
            PORTB = PORTB | DIGIT2;
            PORTD = N3;
            PORTD = CLEAR;
          }
          
          if(random2y == 4) //case 4:
          {
            mask(mask_val);
            PORTB = PORTB | DIGIT2;
            PORTD = N4;
            PORTD = CLEAR;
          }
            
          if(random2y == 5) //case 5:
          {
            mask(mask_val);
            PORTB = PORTB | DIGIT2;
            PORTD = N5;
            PORTD = CLEAR;
          }
    
          if(random2y == 6) //case 6:
          {
            mask(mask_val);
            PORTB = PORTB | DIGIT2;
            PORTD = N6;
            PORTD = CLEAR;
          }
           
          if(random2y == 7) //case 7:
          {
            mask(mask_val);
            PORTB = PORTB | DIGIT2;
            PORTD = N7;
            PORTD = CLEAR;
          }
          
          if(random2y == 8) //case 8:
          {
            mask(mask_val);
            PORTB = PORTB | DIGIT2;
            PORTD = N8;
            PORTD = CLEAR;
          }

          if(random2y == 8) //case 9:
          {
            mask(mask_val);
            PORTB = PORTB | DIGIT2;
            PORTD = N9;
            PORTD = CLEAR;  
          }

        //switch (random3y)
          if(random3y == 1) 
          {            
            //case 1: 
            mask(mask_val);
            PORTB = PORTB | DIGIT3;
            PORTD = N1;
            PORTD = CLEAR;
          }
           
          if(random3y == 2) //case 2:
          {
            mask(mask_val);
            PORTB = PORTB | DIGIT3;
            PORTD = N2;
            PORTD = CLEAR;
          }
           
          if(random3y == 3) //case 3:
          {
            mask(mask_val);
            PORTB = PORTB | DIGIT3;
            PORTD = N3;
            PORTD = CLEAR;
          }
           
          if(random3y == 4) //case 4:
          {
            mask(mask_val);
            PORTB = PORTB | DIGIT3;
            PORTD = N4;
            PORTD = CLEAR;
          }
           
          if(random3y == 5) //case 5:
          {
            mask(mask_val);
            PORTB = PORTB | DIGIT3;
            PORTD = N5;
            PORTD = CLEAR;
          }
           
          if(random3y == 6) //case 6:
          {
            mask(mask_val);
            PORTB = PORTB | DIGIT3;
            PORTD = N6;
            PORTD = CLEAR;
          }
          
          if(random3y == 7) //case 7:
          {
            mask(mask_val);
            PORTB = PORTB | DIGIT3;
            PORTD = N7;
            PORTD = CLEAR;
          }

          if(random3y == 8) //case 8:
          {
            mask(mask_val);
            PORTB = PORTB | DIGIT3;
            PORTD = N8;
            PORTD = CLEAR;
          }
          if(random3y == 9) //case 9:
          {
            mask(mask_val);
            PORTB = PORTB | DIGIT3;
            PORTD = N9;
            PORTD = CLEAR;
          }
      }
   }

void winner (int random1y, int random2y, int random3y)
  {
    if(random1y == random2y == random3y | random1y && random2y && random3y <=5)
      {
        for(int i=0; i<3; i++)
        {
          mask(mask_val);
          PORTB = PORTB | DIGIT1;
          PORTD = PORTD | myWin[random1y];
          PORTD = CLEAR;
  
          mask(mask_val);
          PORTB = PORTB | DIGIT2;
          PORTD = PORTD | myWin[random2y];
          PORTD = CLEAR;
  
          mask(mask_val);
          PORTB = PORTB | DIGIT3;
          PORTD = PORTD | myWin[random3y];
          PORTD = CLEAR;
        }
        
      }
  }

